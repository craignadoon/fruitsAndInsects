/// #include <ngl/Camera.h>
/// #include <ngl/Material.h>
/// #include <ngl/Obj.h>
/// #include <ngl/ShaderLib.h>
/// #include <ngl/TransformStack.h>
/// #include <ngl/Transformation.h>
/// #include <ngl/Vec3.h>
/// #include "include/fallingChars.h"
/// #include "include/gameEntities.h"

/// @file   basket.h
/// @brief  this class creates the basket, which the player moves around the game world
///         to catch the Falling Characters
/// @author Navpreet Kaur Pawar
/// @version 1.0
/// @date   27/03/13 Updated to NCCA Coding standard
/// Revision History : \n
/// Initial Version : 27/03/13
/// @class basket
/// @brief this class creates the basket which catches the falling characters

#ifndef BASKET_H
#define BASKET_H

#include "ngl/Camera.h"
#include "ngl/Material.h"
#include "ngl/Obj.h"
#include "ngl/ShaderLib.h"
#include "ngl/TransformStack.h"
#include "ngl/Transformation.h"
#include "ngl/Vec3.h"
#include "fallingChars.h"
#include "gameEntities.h"

class basket
{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    //----------------------------------------------------------------------------------------------------------------------
    basket();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor
    ///  @param[in]     _pos    basket position
    ///  @param[in]     _m      game entity mesh
    ///  @param[in]     _cam    camera
    //----------------------------------------------------------------------------------------------------------------------
    basket(ngl::Vec3 _pos,
           gameEntities *_m,
           ngl::Camera *_cam
           );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief basket destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~basket();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief boolean to determine the basket status if it is hit by stone or not
    //----------------------------------------------------------------------------------------------------------------------
    bool m_hit;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Draw method for drawing the basket
    ///  @param[in]     _shaderName     the shader
    ///  @param[in]     _transformStack the transformation stack
    ///  @param[in]     _cam            the camera
    //----------------------------------------------------------------------------------------------------------------------
    void drawBasket(
                    const std::string &_shaderName,
                    ngl::TransformStack &_transformStack,
                    ngl::Camera *_cam
                    );
    //----------------------------------------------------------------------------------------------------------------------
    void drawBasket(
                    bool _hitval, const std::string &_shaderName, ngl::TransformStack &_transformStack, ngl::Camera *_cam
                    );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to move the basket in the game world, in the xz plane
    ///  @param[in] _bx - the x coordinate of the basket position
    ///  @param[in] _bz - the z coordinate of the basket position
    //----------------------------------------------------------------------------------------------------------------------
    void moveBasket(
                    float bx,
                    float bz
                    );

    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to rotate the basket
    ///  @param[in] _rot - the rotation value for the basket
    //----------------------------------------------------------------------------------------------------------------------
    void rotateBasket(
                       float _rot
                      );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to reduce the basket shield value
    //----------------------------------------------------------------------------------------------------------------------
    void reduceShield();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to get the basket shield value
    //----------------------------------------------------------------------------------------------------------------------
    int getBasketShield();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to update the score of the player according to number of catches
    ///        and type of falling characters
    ///  @param[in] _type   the type of falling character caught
    //----------------------------------------------------------------------------------------------------------------------
    void updateScore(
                     int &_type
                     );
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to get the score
    //----------------------------------------------------------------------------------------------------------------------
    int getBasketScore();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to check the flag status of basket if it is hit by stone
    //----------------------------------------------------------------------------------------------------------------------
    inline bool isHit()const {return m_hit;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to set the flag status of basket when hit by stone
    //----------------------------------------------------------------------------------------------------------------------
    inline void setHit(){m_hit=true;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to reset the flag status of basket to not-hit
    //----------------------------------------------------------------------------------------------------------------------
    inline void setnotHit(){m_hit=false;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to get basket's position
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 getBasketPos();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Method to get basket's radius
    //----------------------------------------------------------------------------------------------------------------------
    float getBasketRad();


private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the position of the basket
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_basketPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief basket rotation
    //----------------------------------------------------------------------------------------------------------------------
    float m_basketRot;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief game entity's pointer to draw the basket
    //----------------------------------------------------------------------------------------------------------------------
    const gameEntities *m_GameEntity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the camera
    //----------------------------------------------------------------------------------------------------------------------
    const ngl::Camera *m_camera;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief shield strength of the basket, with a default value of 10
    //----------------------------------------------------------------------------------------------------------------------
    int m_basketShield;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief basket/player's score
    //----------------------------------------------------------------------------------------------------------------------
    int m_basketScore;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief basket  radius
    //----------------------------------------------------------------------------------------------------------------------
    float m_basketRad;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief load all the transform values to the shader
    /// @param[in]  _tx     the current transform to load
    ///  @param[in] _cam    the camera
    //----------------------------------------------------------------------------------------------------------------------
    void loadMatricesToShader(
                               ngl::TransformStack &_tx,
                               ngl::Camera *_cam
                             )const;
}; //end class
#endif  // BASKET_H
//----------------------------------------------------------------------------------------------------------------------
