/// #include "ngl/Camera.h"
/// #include "ngl/Colour.h"
/// #include "ngl/Light.h"
/// #include "ngl/Material.h"
/// #include "ngl/NGLInit.h"
/// #include "ngl/Obj.h"
/// #include "ngl/ShaderLib.h"
/// #include "ngl/SpotLight.h"
/// #include "ngl/Text.h"
/// #include "ngl/Transformation.h"
/// #include "ngl/TransformStack.h"
/// #include "ngl/Util.h"
/// #include "ngl/Random.h"
/// #include "include/gameEntities.h"
/// #include "include/basket.h"
/// #include "include/fallingChars.h"
/// #include "include/gameWorld.h"
/// #include "include/gameGround.h"
// must be included after our stuff becuase GLEW needs to be first
/// #include <QtOpenGL>
/// #include <iostream>

//----------------------------------------------------------------------------------------------------------------------
/// @file gameManager.h
/// @brief a basic Qt GL window class for ngl demos
/// @author Navpreet Kaur Pawar
/// @version 1.0
/// @date   27/03/13 Updated to NCCA Coding standard
/// Revision History : \n
/// Initial Version : 27/03/13
/// @class gameManager
/// @brief our main glwindow widget for NGL applications all drawing elements are
/// put in this file.
/// it is the game's main class and create the game world with all its haracters.
/// it checks for collisions between the falling characters and the basket
//----------------------------------------------------------------------------------------------------------------------

#ifndef GAMEMANAGER_H
#define GAMEMANAGER_H

#include "ngl/Camera.h"
#include "ngl/Colour.h"
#include "ngl/Light.h"
#include "ngl/Material.h"
#include "ngl/NGLInit.h"
#include "ngl/Obj.h"
#include "ngl/ShaderLib.h"
#include "ngl/SpotLight.h"
#include "ngl/Text.h"
#include "ngl/Transformation.h"
#include "ngl/TransformStack.h"
#include "ngl/Util.h"
#include "ngl/Random.h"
#include "basket.h"
#include "gameWorld.h"
#include "gameGround.h"
#include <iostream>
// must be included after our stuff becuase GLEW needs to be first
#include <QtOpenGL>


class gameManager : public QGLWidget
{
// must include when using Qt signals/slots
Q_OBJECT
public :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Constructor for GLWindow
    /// @param [in] _parent the parent window to create the GL context in
    //----------------------------------------------------------------------------------------------------------------------
    gameManager(QWidget *_parent);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor add any code here to tidy up
    //----------------------------------------------------------------------------------------------------------------------
    ~gameManager();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief processKeyDown passed from the main window class
    /// @param *_event a pointer to the QKeyEvent passed from main window class
    //----------------------------------------------------------------------------------------------------------------------
    void processKeyDown(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief processKeyUp passed from the main window class
    /// @param *_event a pointer to the QKeyEvent passed from main window class
    //----------------------------------------------------------------------------------------------------------------------
    void processKeyUp(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to move the basket with every key press
    /// updates the basket position with respect to arrow keys in x and z axis
    /// calls the move funtion of basket class to update basket position
    //----------------------------------------------------------------------------------------------------------------------
    void moveBasket_gl();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to call the move method of fallingChars class
    //----------------------------------------------------------------------------------------------------------------------
    void moveFallingChars_gl();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to check the progress in number of catches made by basket
    //----------------------------------------------------------------------------------------------------------------------
    int catchProgress();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to return the shield value of the basket
    //----------------------------------------------------------------------------------------------------------------------
    int shieldLeft();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to return the score
    //----------------------------------------------------------------------------------------------------------------------
    int playerScore();

signals:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief signal to update the shield value in UI
    //----------------------------------------------------------------------------------------------------------------------
    void updateShield();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief signal to update the score in UI
    //----------------------------------------------------------------------------------------------------------------------
    void updateScore();

public slots:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to exit the game from UI exit button
    //----------------------------------------------------------------------------------------------------------------------
    void exit_game();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to play the game from UI play button
    //----------------------------------------------------------------------------------------------------------------------
    void setPlay();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to pause the game from UI pause button
    //----------------------------------------------------------------------------------------------------------------------
    void setPause();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to resume the game from UI resume button
    //----------------------------------------------------------------------------------------------------------------------
    void setResume();

private :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the x rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinXFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief used to store the y rotation mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_spinYFace;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_rotate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief flag to indicate if the Right mouse button is pressed when dragging
    //----------------------------------------------------------------------------------------------------------------------
    bool m_translate;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origX;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value
    //----------------------------------------------------------------------------------------------------------------------
    int m_origY;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous x mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origXPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the previous y mouse value for Position changes
    //----------------------------------------------------------------------------------------------------------------------
    int m_origYPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the model position for mouse movement
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Vec3 m_modelPos;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief a timer triggered by the startTimer call in the ctor this is called
    /// to update the basket position based on the key presses
    //----------------------------------------------------------------------------------------------------------------------
    int m_updateTimer;
    int m_redrawTimer;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief game Camera
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Camera *m_cam;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief transform stack for drawing
    //----------------------------------------------------------------------------------------------------------------------
    ngl::TransformStack m_transformStack;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the keys being pressed
    //----------------------------------------------------------------------------------------------------------------------
    QSet<Qt::Key> m_keysPressed;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the light
    //----------------------------------------------------------------------------------------------------------------------
    ngl::Light *m_light;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the gameEntity class for all game meshes
    //----------------------------------------------------------------------------------------------------------------------
    gameEntities m_gameentity;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the basket class pointer
    //----------------------------------------------------------------------------------------------------------------------
    basket *m_Basket;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the fallingChar class pointer
    //----------------------------------------------------------------------------------------------------------------------
    fallingChars *m_fallingChars;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the gameGround class pointer
    //----------------------------------------------------------------------------------------------------------------------
    gameGround *m_gameGround;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief the gameWorld class pointer
    //----------------------------------------------------------------------------------------------------------------------
    gameWorld *m_gameWorld;

protected:

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief  The following methods must be implimented in the sub class
  /// this is called when the window is created
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is called whenever the window is re-sized
  /// @param[in] _w the width of the resized window
  /// @param[in] _h the height of the resized window
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(
                const int _w,
                const int _h
               );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this is the main gl drawing routine which is called whenever the window needs to
  /// be re-drawn
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();

private :
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief counter to keep track of number of catches
  //----------------------------------------------------------------------------------------------------------------------
  int catchCount;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief text for game's heads up display
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Text *m_hud;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to play or stop the game
  //----------------------------------------------------------------------------------------------------------------------
  bool playFlag;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief flag to pause the game
  //----------------------------------------------------------------------------------------------------------------------
  bool pauseFLag;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to check if there is a catch by basket
  /// calls the collsion detection method to validate a check
  //----------------------------------------------------------------------------------------------------------------------
  void checkCatch();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to check the collision between basket and falling characters
  /// @param _pos1  basket's position
  /// @param _rad1  basket's radius
  /// @param _pos2  falling character's position
  /// @param _rad2  falling character's radius
  //----------------------------------------------------------------------------------------------------------------------
  bool basketFallingCharCollision(
                                  ngl::Vec3 _pos1,
                                  float _rad1,
                                  ngl::Vec3 _pos2,
                                  float _rad2
                                  );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief the timer event triggered from the timers
  /// @param _even the event of the timer triggered by Qt
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(
                  QTimerEvent *_event
                 );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief method to load the tx stack (+MVP) to the shader
  /// @param _tx the transform stack to use for the model part of the matrix
  //----------------------------------------------------------------------------------------------------------------------
  void loadMatricesToShader(
                             ngl::TransformStack &_tx
                           );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called every time a mouse is moved
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent (
                       QMouseEvent * _event
                      );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is pressed
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent (
                        QMouseEvent *_event
                       );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse button is released
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent (
                          QMouseEvent *_event
                         );
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief this method is called everytime the mouse wheel is moved
  /// inherited from QObject and overridden here.
  /// @param _event the Qt Event structure
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent(
                    QWheelEvent *_event
                 );


}; //end class
#endif // GAMEMANAGER_H
//----------------------------------------------------------------------------------------------------------------------
