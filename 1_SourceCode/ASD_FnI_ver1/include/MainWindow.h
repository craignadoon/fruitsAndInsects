/// #include <sstream>
/// #include <QMainWindow>
/// #include "ngl/NGLInit.h"
/// #include "include/gameManager.h"

//----------------------------------------------------------------------------------------------------------------------
/// @file MainWindow.h
/// @brief This is the MainWindow Class which is generated by the Ui file
/// Ui we add it here
/// @author Navpreet Kaur Pawar
/// @version 1.0
/// @date   27/03/13 Updated to NCCA Coding standard
/// Revision History : \n
/// Initial Version : 27/03/13
/// @class MainWindow
/// @brief the main re-sizable window which contains a GLWindow widget used to hold our
/// basic gl applications
//----------------------------------------------------------------------------------------------------------------------

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <sstream>
#include <QMainWindow>
#include "ngl/NGLInit.h"
#include "gameManager.h"

namespace Ui {
class MainWindow;
}   // end namespace

class MainWindow : public QMainWindow
{
    Q_OBJECT
protected :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief override the keyPressEvent inherited from QObject so we can handle key presses.
    /// @param [in] _event the event to process
    //----------------------------------------------------------------------------------------------------------------------
    void keyPressEvent(QKeyEvent *_event);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief override the keyPressEvent inherited from QObject so we can handle key presses.
    /// @param [in] _event the event to process
    //----------------------------------------------------------------------------------------------------------------------
    void keyReleaseEvent(QKeyEvent *_event);

public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief ctor basically we create a GLWindow and parent it to
    /// this window so our GLWindow is the main canvas
    //----------------------------------------------------------------------------------------------------------------------
    explicit MainWindow(QWidget *parent = 0);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief dtor
    //----------------------------------------------------------------------------------------------------------------------
    ~MainWindow();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief method to check the progress of basket catches with every key press
    //----------------------------------------------------------------------------------------------------------------------
    bool catchprog();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialize the catch count to zero to for previous catch
    //----------------------------------------------------------------------------------------------------------------------
    int prevCatchCount = 0;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief initialize the catch count to zero to for current catch
    //----------------------------------------------------------------------------------------------------------------------
    int currCatchCount = 0;


signals :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief signal to update the progress bar in the user interface
    //----------------------------------------------------------------------------------------------------------------------
    void updateBar();

private slots :
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to update the progress bar in the user interface
    //----------------------------------------------------------------------------------------------------------------------
    void updateProgBar();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to update the label for player's shield
    //----------------------------------------------------------------------------------------------------------------------
    void updateShieldLabel();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief slot to update the label for player's score
    //----------------------------------------------------------------------------------------------------------------------
    void updateScoreLabel();

private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our gl window created in gameManager
    //----------------------------------------------------------------------------------------------------------------------
    gameManager *m_gl;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief main window user interface
    //----------------------------------------------------------------------------------------------------------------------
    Ui::MainWindow *m_ui;
}; //end class
#endif // MAINWINDOW_H
//----------------------------------------------------------------------------------------------------------------------
